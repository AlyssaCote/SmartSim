
Simulation Control
------------------

The ``Controller`` launches and monitors the models generated by the ``Generator``.
There are two main methods of launching models today

  1) The Slurm workload manager
  2) Locally

Both can be used through the TOML or python interface.

Slurm
=====

The ``Controller`` takes in a dictionary of configurations for Slurm. Some of the
configurations are required, and the ``Controller`` will raise a ``SSConfigError``
without them. The required fields are

  - ``run_command``: prepended command for distributed run. ex. ``mpirun``
  - ``executable``: executable of the model being run.

The currently supported configurations are

  - ``launcher``: set the launcher. Options are "slurm" and "" for local
  - ``nodes``: number of nodes for each model. Defaults to 1
  - ``ppn``: processes per node. Defaults to 1
  - ``duration``: amount of time allotted for each model
  - ``partition``: node resources to run models on. Ex. ``gpu``
  - ``exe_args``: arguments to pass to the executable
  - ``run_args``: arguments to pass to the run command

Through the Slurm integration, all of the models can be run in parallel and in the
background such that the path of execution inside of a python script is not blocked
until all the models are finished. As soon as all of the models are submitted to Slurm
the script will continue on it's main thread.

For example the following piece of python code runs the ``CP2K`` model with four
different configurations of an H20 simulation. The simulation uses the Slurm integration
to launch the models each on one GPU. After they are submitted, we uses
the ``Controller.poll()`` method to check on the status of the four models.

.. code-block:: python

   from smartsim import Controller, Generator, State

   # init state
   state= State(experiment="h2o", log_level="DEBUG")

   # create targets
   target_params = {"STEPS": [10, 15, 20, 25]}
   state.create_target("h2o-1", params=target_params)


   # Data Generation Phase
   gen = Generator(state, model_files="CP2K/h2o.inp")
   gen.generate()

   sim_params = {"launcher": "slurm",       # setup slurm
                "executable": "cp2k.psmp",
                "run_command": "srun",
                "partition": "gpu",
                "exe_args": "-i h2o.inp",
                "nodes": 1}
   sim = Controller(state, **sim_params)
   sim.start()                              # run all the models in parallel
   sim.poll()                               # immediately poll the models


Local
=====

Running models through the ``local`` launcher provides the same interface as the
Slurm integration except that some of the configurations("duration", "ppn", "nodes",
"launcher", and "partition") are meaningless.

.. note::

   The local method of launching models will run each model serially. 
