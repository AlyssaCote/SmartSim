
Generator
=========

To efficently run a number of models, the model input files and configurations must
be duplicated and modified automatically. The Generator module allows users to
rapidly generate and configure models through two APIs: Python and TOML.

The experiment structure generated by this module is reflected in the code block below.
Experiments hold ensembles and ensembles hold actual models. ensembles are groupings of
similar models whose configurations are largely the same. For example, ensembles may
fix resolutions or grid configurations while models hold various tunable parameter
values.

.. code-block:: text

   lammps_atm/                  (experiment name)
     └── atm                    (ensemble name)
         ├── atm_0              (model name)
         │    └── in.atm
         └── atm_1              (model name)
              └── in.atm


A configuration file for this generation could look like the following when generated
with the all permutations strategy.

.. code-block:: toml

   [model]
   name = "lammps"
   ensembles = ["atm"]
   experiment = "lammps_atm"
   configs = ["in.atm"]

   [atm]
     [atm.lj]              # lj is the previous value marked in "in.atm" (e.g. ;lj;)
     value = ["ls", "ld"]


To generate the same experiment in python, the following code could be used.

.. code-block:: python

   from smartsim import State, Generator
   state = State(experiment="lammps_atm")
   ensemble_params = {"lj": ["ls", "ld"]}
   state.create_ensemble("atm", params=ensemble_params}

   gen = Generator(state, model_files="in.atm")
   gen.generate()




.. automodule:: smartsim.generation.generator
   :members:
