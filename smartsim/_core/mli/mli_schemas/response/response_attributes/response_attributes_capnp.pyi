"""This is an automatically generated stub for `response_attributes.capnp`."""
# mypy: ignore-errors

from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator

class TorchResponseAttributes:
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[TorchResponseAttributesReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> TorchResponseAttributesReader: ...
    @staticmethod
    def new_message() -> TorchResponseAttributesBuilder: ...
    def to_dict(self) -> dict: ...

class TorchResponseAttributesReader(TorchResponseAttributes):
    def as_builder(self) -> TorchResponseAttributesBuilder: ...

class TorchResponseAttributesBuilder(TorchResponseAttributes):
    @staticmethod
    def from_dict(dictionary: dict) -> TorchResponseAttributesBuilder: ...
    def copy(self) -> TorchResponseAttributesBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TorchResponseAttributesReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TensorFlowResponseAttributes:
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[TensorFlowResponseAttributesReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> TensorFlowResponseAttributesReader: ...
    @staticmethod
    def new_message() -> TensorFlowResponseAttributesBuilder: ...
    def to_dict(self) -> dict: ...

class TensorFlowResponseAttributesReader(TensorFlowResponseAttributes):
    def as_builder(self) -> TensorFlowResponseAttributesBuilder: ...

class TensorFlowResponseAttributesBuilder(TensorFlowResponseAttributes):
    @staticmethod
    def from_dict(dictionary: dict) -> TensorFlowResponseAttributesBuilder: ...
    def copy(self) -> TensorFlowResponseAttributesBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TensorFlowResponseAttributesReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
