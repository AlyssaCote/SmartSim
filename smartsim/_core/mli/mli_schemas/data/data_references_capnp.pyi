"""This is an automatically generated stub for `data_references.capnp`."""

# mypy: ignore-errors

from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator

class ModelKey:
    key: str
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[ModelKeyReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> ModelKeyReader: ...
    @staticmethod
    def new_message() -> ModelKeyBuilder: ...
    def to_dict(self) -> dict: ...

class ModelKeyReader(ModelKey):
    def as_builder(self) -> ModelKeyBuilder: ...

class ModelKeyBuilder(ModelKey):
    @staticmethod
    def from_dict(dictionary: dict) -> ModelKeyBuilder: ...
    def copy(self) -> ModelKeyBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ModelKeyReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TensorKey:
    key: str
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[TensorKeyReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> TensorKeyReader: ...
    @staticmethod
    def new_message() -> TensorKeyBuilder: ...
    def to_dict(self) -> dict: ...

class TensorKeyReader(TensorKey):
    def as_builder(self) -> TensorKeyBuilder: ...

class TensorKeyBuilder(TensorKey):
    @staticmethod
    def from_dict(dictionary: dict) -> TensorKeyBuilder: ...
    def copy(self) -> TensorKeyBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TensorKeyReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
