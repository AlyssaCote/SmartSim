// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_protob_array.proto

#include "ss_protob_array.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SmartSimPBArray {
class ArrayDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayDouble> _instance;
} _ArrayDouble_default_instance_;
class ArrayFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayFloat> _instance;
} _ArrayFloat_default_instance_;
}  // namespace SmartSimPBArray
static void InitDefaultsscc_info_ArrayDouble_ss_5fprotob_5farray_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartSimPBArray::_ArrayDouble_default_instance_;
    new (ptr) ::SmartSimPBArray::ArrayDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartSimPBArray::ArrayDouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayDouble_ss_5fprotob_5farray_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArrayDouble_ss_5fprotob_5farray_2eproto}, {}};

static void InitDefaultsscc_info_ArrayFloat_ss_5fprotob_5farray_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SmartSimPBArray::_ArrayFloat_default_instance_;
    new (ptr) ::SmartSimPBArray::ArrayFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmartSimPBArray::ArrayFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArrayFloat_ss_5fprotob_5farray_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArrayFloat_ss_5fprotob_5farray_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ss_5fprotob_5farray_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ss_5fprotob_5farray_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ss_5fprotob_5farray_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ss_5fprotob_5farray_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartSimPBArray::ArrayDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartSimPBArray::ArrayDouble, dimension_),
  PROTOBUF_FIELD_OFFSET(::SmartSimPBArray::ArrayDouble, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartSimPBArray::ArrayFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartSimPBArray::ArrayFloat, dimension_),
  PROTOBUF_FIELD_OFFSET(::SmartSimPBArray::ArrayFloat, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SmartSimPBArray::ArrayDouble)},
  { 7, -1, sizeof(::SmartSimPBArray::ArrayFloat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartSimPBArray::_ArrayDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartSimPBArray::_ArrayFloat_default_instance_),
};

const char descriptor_table_protodef_ss_5fprotob_5farray_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ss_protob_array.proto\022\017SmartSimPBArray"
  "\"6\n\013ArrayDouble\022\025\n\tdimension\030\001 \003(\004B\002\020\001\022\020"
  "\n\004data\030\002 \003(\001B\002\020\001\"5\n\nArrayFloat\022\025\n\tdimens"
  "ion\030\001 \003(\004B\002\020\001\022\020\n\004data\030\002 \003(\002B\002\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ss_5fprotob_5farray_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ss_5fprotob_5farray_2eproto_sccs[2] = {
  &scc_info_ArrayDouble_ss_5fprotob_5farray_2eproto.base,
  &scc_info_ArrayFloat_ss_5fprotob_5farray_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ss_5fprotob_5farray_2eproto_once;
static bool descriptor_table_ss_5fprotob_5farray_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_5fprotob_5farray_2eproto = {
  &descriptor_table_ss_5fprotob_5farray_2eproto_initialized, descriptor_table_protodef_ss_5fprotob_5farray_2eproto, "ss_protob_array.proto", 159,
  &descriptor_table_ss_5fprotob_5farray_2eproto_once, descriptor_table_ss_5fprotob_5farray_2eproto_sccs, descriptor_table_ss_5fprotob_5farray_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ss_5fprotob_5farray_2eproto::offsets,
  file_level_metadata_ss_5fprotob_5farray_2eproto, 2, file_level_enum_descriptors_ss_5fprotob_5farray_2eproto, file_level_service_descriptors_ss_5fprotob_5farray_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ss_5fprotob_5farray_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ss_5fprotob_5farray_2eproto)), true);
namespace SmartSimPBArray {

// ===================================================================

void ArrayDouble::InitAsDefaultInstance() {
}
class ArrayDouble::_Internal {
 public:
};

ArrayDouble::ArrayDouble()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartSimPBArray.ArrayDouble)
}
ArrayDouble::ArrayDouble(const ArrayDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimension_(from.dimension_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SmartSimPBArray.ArrayDouble)
}

void ArrayDouble::SharedCtor() {
}

ArrayDouble::~ArrayDouble() {
  // @@protoc_insertion_point(destructor:SmartSimPBArray.ArrayDouble)
  SharedDtor();
}

void ArrayDouble::SharedDtor() {
}

void ArrayDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayDouble& ArrayDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayDouble_ss_5fprotob_5farray_2eproto.base);
  return *internal_default_instance();
}


void ArrayDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartSimPBArray.ArrayDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_.Clear();
  data_.Clear();
  _internal_metadata_.Clear();
}

const char* ArrayDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 dimension = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_dimension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dimension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartSimPBArray.ArrayDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 dimension = 1 [packed = true];
  {
    int byte_size = _dimension_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_dimension(), byte_size, target);
    }
  }

  // repeated double data = 2 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartSimPBArray.ArrayDouble)
  return target;
}

size_t ArrayDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartSimPBArray.ArrayDouble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 dimension = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->dimension_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimension_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartSimPBArray.ArrayDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartSimPBArray.ArrayDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartSimPBArray.ArrayDouble)
    MergeFrom(*source);
  }
}

void ArrayDouble::MergeFrom(const ArrayDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartSimPBArray.ArrayDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_.MergeFrom(from.dimension_);
  data_.MergeFrom(from.data_);
}

void ArrayDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartSimPBArray.ArrayDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayDouble::CopyFrom(const ArrayDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartSimPBArray.ArrayDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayDouble::IsInitialized() const {
  return true;
}

void ArrayDouble::InternalSwap(ArrayDouble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimension_.InternalSwap(&other->dimension_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArrayFloat::InitAsDefaultInstance() {
}
class ArrayFloat::_Internal {
 public:
};

ArrayFloat::ArrayFloat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmartSimPBArray.ArrayFloat)
}
ArrayFloat::ArrayFloat(const ArrayFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimension_(from.dimension_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SmartSimPBArray.ArrayFloat)
}

void ArrayFloat::SharedCtor() {
}

ArrayFloat::~ArrayFloat() {
  // @@protoc_insertion_point(destructor:SmartSimPBArray.ArrayFloat)
  SharedDtor();
}

void ArrayFloat::SharedDtor() {
}

void ArrayFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayFloat& ArrayFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayFloat_ss_5fprotob_5farray_2eproto.base);
  return *internal_default_instance();
}


void ArrayFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartSimPBArray.ArrayFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_.Clear();
  data_.Clear();
  _internal_metadata_.Clear();
}

const char* ArrayFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 dimension = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_dimension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dimension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartSimPBArray.ArrayFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 dimension = 1 [packed = true];
  {
    int byte_size = _dimension_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_dimension(), byte_size, target);
    }
  }

  // repeated float data = 2 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartSimPBArray.ArrayFloat)
  return target;
}

size_t ArrayFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartSimPBArray.ArrayFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 dimension = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->dimension_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimension_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartSimPBArray.ArrayFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartSimPBArray.ArrayFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartSimPBArray.ArrayFloat)
    MergeFrom(*source);
  }
}

void ArrayFloat::MergeFrom(const ArrayFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartSimPBArray.ArrayFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_.MergeFrom(from.dimension_);
  data_.MergeFrom(from.data_);
}

void ArrayFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartSimPBArray.ArrayFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayFloat::CopyFrom(const ArrayFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartSimPBArray.ArrayFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayFloat::IsInitialized() const {
  return true;
}

void ArrayFloat::InternalSwap(ArrayFloat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimension_.InternalSwap(&other->dimension_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartSimPBArray
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartSimPBArray::ArrayDouble* Arena::CreateMaybeMessage< ::SmartSimPBArray::ArrayDouble >(Arena* arena) {
  return Arena::CreateInternal< ::SmartSimPBArray::ArrayDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartSimPBArray::ArrayFloat* Arena::CreateMaybeMessage< ::SmartSimPBArray::ArrayFloat >(Arena* arena) {
  return Arena::CreateInternal< ::SmartSimPBArray::ArrayFloat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
