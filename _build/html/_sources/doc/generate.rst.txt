
Generation
----------

For the succientness of the documentation, the examples below will all be using the
python interface to run experiments.


Tagging and Creation
====================

To generate new instances of a simulation model, find and tag the simulation sepcific
configuration file. The following experiment will use a particle simulation model
named ``LAMMPS``. The model configuration file, ``in.atm`` specifies LAMMPS to run
a Axilrod-Teller-Muto (ATM) potential calculation.

.. code-block:: text

   # Axilrod-Teller-Muto potential example

   variable        x index 1
   variable        y index 1
   variable        z index 1

   variable        xx equal 10*$x
   variable        yy equal 10*$y
   variable        zz equal 10*$z

   units           lj
   atom_style      atomic

   lattice         fcc 0.65
   region          box block 0 ${xx} 0 ${yy} 0 ${zz}
   create_box      1 box
   create_atoms    1 box

   pair_style      hybrid/overlay lj/cut 4.5 atm 4.5 2.5
   pair_coeff      * * lj/cut 1.0 1.0
   pair_coeff      * * atm * 0.072

   mass            * 1.0
   velocity        all create 1.033 12345678 loop geom

   fix             1 all nvt temp 1.033 1.033 0.05

   timestep        0.002
   thermo          5

   run             25

The last variable listed, ``run``, tells the simulation to run for a number of steps
before exiting. For this example, we will tag, and modify the number of steps in order
to generate four simulation models that run for 4 different lengths of time.

Tagging the configuration file lets the ``Generator`` know which of and where in
the model files to edit given a file or folder of model files to modify.

To tag the ``in.atm`` configuration file listed above, place semicolons on either
side of the values that you wish to change, and put in a good placeholder name
so that you can remember which values are being edited.

.. code-block:: text

   # Axilrod-Teller-Muto potential example

   variable        x index 1
   variable        y index 1
   variable        z index 1

   variable        xx equal 10*$x
   variable        yy equal 10*$y
   variable        zz equal 10*$z

   units           lj
   atom_style      atomic

   lattice         fcc 0.65
   region          box block 0 ${xx} 0 ${yy} 0 ${zz}
   create_box      1 box
   create_atoms    1 box

   pair_style      hybrid/overlay lj/cut 4.5 atm 4.5 2.5
   pair_coeff      * * lj/cut 1.0 1.0
   pair_coeff      * * atm * 0.072

   mass            * 1.0
   velocity        all create 1.033 12345678 loop geom

   fix             1 all nvt temp 1.033 1.033 0.05

   timestep        0.002
   thermo          5

   run             ;STEPS;

The tag can also be set through a call to ``Generator.set_tag()``. The tag can be
anything that wont be already represented within the configuration file itself.
For instance, in the example above, we wouldnt want to use dollar signs or curly
braces for the tag.

Once the configuration file(s) are tagged and ready, the experiment can be setup
through the ``Experiment`` initialization as follows

.. code-block:: python

  # import needed smartsim modules
  from smartsim import Controller, Generator, Experiment

  # intialize experiment to conduct experiment
  experiment = Experiment(experiment="lammps_atm")


For this example, we will create one target that holds the four models with
four increasing number of steps. This is done through a call to ``experiment.create_target``
as follows:

.. code-blocK:: python

  # Create targets
  param_dict_1 = {"steps": [20, 25, 30, 35]}
  experiment.create_target("atm", params=param_dict)

The parameter dictionary above specifies the placeholder we put into the configuration
file as the keys and the values we wish for models to be configurated and created with
as the values.

Generation Strategies
=====================

To generate our models we need to create an instance of a generator, provide
the tagged configuration files and make a call to ``Generator.generate()``.  The
``generate`` function creates models according to the specified permutation strategy,
which, by default, is "all permutations": it creates every model possible, given the
input parameters.  In order to select the strategy, we may call the
``Generator.set_strategy()`` function with the following argument types: a string
corresponding to one of the internal strategies, a string formatted as "module.function"
that the Generator will then load, or an actual function.

There are three built in permutation strategies: "all_perm", "random", and "step".
"all_perm" returns all possible combinations of the input parameters; "random" returns
``n_models`` models; this can be seen as a random subset of all possible combinations.
The argument ``n_models`` must be passed to the ``generate`` function.

.. code-block:: python

  # Supply the generator with necessary files to run the simulation
  # and generate the specified models.
  base_config = "LAMMPS/in.atm"
  GEN = Generator(experiment, model_files=base_config)
  GEN.set_strategy("random")
  GEN.generate(n_models=2)

User supplied functions must accept at _least_ ``param_names`` and ``param_values``,
where param_names is a list of the supplied parameter names, and param_values is a
list of the corresponding parameter names.  In the following example, ``param_names``
is equal to ``[steps]``, and param_values is ``[20, 25, 30, 35]``.

The functions must return a list of dictionaries, where each element in the list
is the dictionary for a model.  For example:

.. code-block:: python

  def my_function(param_names, param_values):
    # only return the single parameter/value
    return [{ param_names[0] : param_values[0] }]

  base_config = "LAMMPS/in.atm"
  GEN = Generator(experiment, model_files=base_config)
  GEN.set_strategy(my_function)
  GEN.generate()

User written functions are not limited to only receiving the above arguments.
Extra arguments may be added to the function as necessary; at runtime, these are
passed through to the selection strategy via the ``generate`` function (as above,
as in for "random" and ``n_models``).

Strategy selection is optional; by default, "all_perm" is used, and the following
is also valid:

.. code-block:: python

  # Supply the generator with necessary files to run the simulation
  # and generate the specified models
  base_config = "LAMMPS/in.atm"
  GEN = Generator(experiment, model_files=base_config)
  GEN.generate()


